generator client {
  provider = "prisma-client-js"
  output   = "../src/infra/Prisma/Generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CommunicationProfiles {
  id                String             @id @db.VarChar(10)
  checksum_regex    String?            @db.VarChar(50)
  type              String?            @db.VarChar(20)
  equipmentProfiles EquipmentProfile[]

  @@map("communication_profiles")
}

model DirectoryHistorial {
  id           BigInt     @id @default(autoincrement())
  equipment_id BigInt?
  filename     String?    @db.VarChar(250)
  filepath     String?    @db.VarChar(500)
  modified_at  DateTime
  equipment    Equipment? @relation(fields: [equipment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_directory_historials_equipment_id_equipments_id")

  @@map("directory_historials")
}

model EquipmentProfile {
  id                    BigInt                 @id 
  communication_profile String?                @db.VarChar(10)
  name                  String?                @db.VarChar(25)
  active                Boolean?
  communication_type    String?                @db.VarChar(25)
  communicationProfile  CommunicationProfiles? @relation(fields: [communication_profile], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_equipment_profiles_communication_profile_communication_pr")
  equipments            Equipment[]

  @@map("equipment_profiles")
}

model Equipment {
  id                     BigInt                   @id @default(autoincrement())
  profile_id             BigInt?
  name                   String?                  @db.VarChar(25)
  created_at             DateTime?                @db.Timestamp(6)
  modified_at            DateTime?                @db.Timestamp(6)
  last_connection        DateTime?                @db.Timestamp(6)
  connection_status      String?                  @db.VarChar(20)
  active                 Boolean?
  directoryHistorials    DirectoryHistorial[]
  equipmentProfile       EquipmentProfile?        @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_equipments_profile_id_equipment_profiles_id")
  parameters             Parameter[]
  equipmentConfiguration EquipmentConfiguration[]
  HistogramResult        HistogramResult[]

  @@map("equipments")
}

model HistogramResult {
  id           BigInt     @id @default(autoincrement())
  result_folio BigInt?
  equipment_id BigInt?
  description  String?    @db.VarChar(25)
  value        String?    @db.VarChar(10)
  created_at   DateTime?  @db.Timestamp(6)
  active       Boolean?
  result       Result?    @relation(fields: [result_folio], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_histogram_results_result_folio_results_folio")
  equipment    Equipment? @relation(fields: [equipment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_histogram_results_references_equipment_id")

  @@map("histogram_results")
}

model Parameter {
  id                      BigInt               @id @default(autoincrement())
  result_id               BigInt?
  equipment_id            BigInt?
  parameter_dictionary_id BigInt?
  description             String?              @db.VarChar(25)
  value                   String?              @db.VarChar(25)
  unit_measurement        String?              @db.VarChar(10)
  max_range               String?              @db.VarChar(10)
  min_range               String?              @db.VarChar(10)
  created_at              DateTime?            @db.Timestamp(6)
  active                  Boolean?
  equipment               Equipment?           @relation(fields: [equipment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_parameters_equipment_id_equipments_id")
  parameterDictionary     ParameterDictionary? @relation(fields: [parameter_dictionary_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_parameters_parameter_dictionary_id_parameter_dictionaries")
  result                  Result?              @relation(fields: [result_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_parameters_result_folio_results_folio")

  @@map("parameters")
}

model Result {
  id               BigInt            @id @default(autoincrement())
  folio            String            @db.VarChar(20)
  created_by       BigInt?
  sample_id        String?           @db.VarChar(12)
  created_at       DateTime?         @db.Timestamp(6)
  last_modified_at DateTime?         @db.Timestamp(6)
  active           Boolean?
  histogramResults HistogramResult[]
  parameters       Parameter[]
  resultSends      ResultSend[]
  user             User?             @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_results_created_by_users_id")

  @@map("results")
}

model ParameterDictionary {
  id                    BigInt           @id 
  system_parameter_id   BigInt?
  parameter_description String?          @db.VarChar(100)
  systemParameter       SystemParameter? @relation(fields: [system_parameter_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_parameter_dictionaries_system_parameter_id_system_paramet")
  parameters            Parameter[]

  @@map("parameter_dictionaries")
}

model ResultSend {
  id           BigInt    @id @default(autoincrement())
  result_folio BigInt?
  send_by      BigInt?
  send_at      DateTime? @db.Timestamp(6)
  status       String?   @db.VarChar(20)
  payload      Json?     @db.Json
  response     Json?     @db.Json
  result       Result?   @relation(fields: [result_folio], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_result_sends_result_folio_results_folio")
  user         User?     @relation(fields: [send_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_result_sends_send_by_users_id")

  @@map("result_sends")
}

model SystemParameter {
  id                    BigInt                @id
  value                 String?               @db.VarChar(10)
  parameterDictionaries ParameterDictionary[]

  @@map("system_parameters")
}

model User {
  id             BigInt       @id @default(autoincrement())
  username       String?      @db.VarChar(20)
  password       String?      @db.VarChar(255)
  resultSends    ResultSend[]
  createdResults Result[]

  @@map("users")
}

model EquipmentConfiguration {
  equipment_id     BigInt
  port             String? @db.VarChar(10)
  ip_address       String? @db.VarChar(15)
  baud_rate        Int?
  mac_address      String? @db.VarChar(17)
  remote_directory String? @db.VarChar(500)

  // Relación con Equipment
  equipment Equipment @relation(fields: [equipment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Definición de clave primaria compuesta (solo equipment_id en este caso)
  @@id([equipment_id])
  @@map("equipment_configurations")
}
